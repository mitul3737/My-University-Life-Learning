# -*- coding: utf-8 -*-
"""Doubly_LinkedList_Lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pAXc6ztQKRazNfXkPC9bEi-UUvufhMeP
"""

class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p

class DoublyList:
    #  Design the constructor based on data type of a. If 'a' is built in python list then
    #  Creates a linked list using the values from the given array.
    def __init__(self, a):
      if type(a) == list:
        dummy_node = Node(None, None, None)
        self.head = dummy_node
        tail = dummy_node  # remove tail and use temp
        temp = self.head
        for i in range(0, len(a)):
          new_node = Node(a[i], None, None)
          tail.next = new_node
          tail = new_node
          new_node.prev = temp
          new_node.next = self.head
          self.head.prev = new_node
          temp = temp.next

      else:
        self.head = a

    # Counts the number of Nodes in the list
    def countNode(self):
      temp = self.head.next
      count_0 = 0
      while temp != self.head:
        count_0 += 1
        temp = temp.next
      return count_0

    # prints the elements in the list
    def forwardprint(self):
      temp = self.head.next
      str_0 = ""
      while temp != self.head:
        str_0 += str(temp.element) + ", "
        temp = temp.next
      return print(str_0[:-2]+".")

    # prints the elements in the list backward
    def backwardprint(self):
      temp = self.head.next
      while temp.next != self.head:
          temp = temp.next
      str_0 = ""
      while temp != self.head:
        str_0 += str(temp.element) + ", "
        temp = temp.prev

      return print(str_0[:-2]+".")

    # returns the reference of the at the given index. For invalid index return None.
    def nodeAt(self, idx):
      temp = self.head.next
      count = 0
      while temp != self.head:
        if count == idx:
          return temp
        count += 1
        temp = temp.next
      return print("index error")

    # returns the index of the containing the given element. if the element does not exist in the List, return -1.
    def indexOf(self, elem):
      temp = self.head.next
      count_0 = 0
      while temp != self.head:
        if temp.element == elem:
          return count_0
        temp = temp.next
        count_0 += 1
      return -1

    # inserts containing the given element at the given index Check validity of index.
    def insert(self, elem, idx):  # bug in insertion
      temp = self.head.next
      count = 0
      while temp != self.head:
        count += 1
        temp = temp.next

      if idx < 0 or idx > count:
        return None

      # Creating a node for the new element
      else:
        new_node = Node(elem, None, None)
        # Adding at beginning
        if idx == 0:
          new_node.next = self.head.next
          self.head.next.prev = new_node
          new_node.prev = self.head
          self.head.next = new_node

        # adding in middle or last
        elif idx < count:  # for middle values
          pred = self.nodeAt(idx - 1)
          new_node.next = pred.next
          pred.next.prev = new_node
          pred.next = new_node
          new_node.prev = pred

        else:  # to add with the last index
          pred = self.nodeAt(idx - 1)
          new_node.next = self.head
          pred.next = new_node
          self.head.prev = new_node
          new_node.prev = pred


  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
    def remove(self, idx):
        temp = self.head.next
        count = 0
        while temp != self.head:
          count += 1
          temp = temp.next

        # checking if the index exists or not
        if idx < 0 or idx >= count:
          return None

        else:
          # if need to remove the first index Case 1
          if idx == 0:
            if count == 0: #If node is empty
              return None
            temp=self.head.next
            self.head.next=temp.next
            temp.next.prev=self.head
            return str(temp.element)

          # if need to remove the last index Case 2
          elif idx == count - 1:
            temp=self.head.prev
            self.head.prev=temp.prev
            temp.prev.next=self.head
            return str(temp.element)
          else:
            temp=self.nodeAt(idx)
            temp.prev.next=temp.next
            temp.next.prev=temp.prev
            return str(temp.element)

print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40.
h1.backwardprint() # This should print: 40,30,20,10.
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40.
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.
h2.backwardprint() # This should print: 40,30,95,20,10,85.

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75.
h2.backwardprint() # This should print: 75,40,30,95,20,10,85.


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.
h3.backwardprint() # This should print: 70,60,50,40,30,20.
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.
h3.backwardprint() # This should print: 70,60,40,30,20.
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60.
h3.backwardprint() # This should print: 60,40,30,20.
